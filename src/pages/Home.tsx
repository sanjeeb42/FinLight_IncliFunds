import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  Lightbulb,
  MapPin,
  ChevronRight,
  Globe,
  Settings,
  User,
  TrendingUp,
  FileText,
  Volume2
} from 'lucide-react';
import { Link } from 'react-router-dom';

const Home: React.FC = () => {
  const [userLocation, setUserLocation] = useState('Maharashtra');
  const [selectedLanguage, setSelectedLanguage] = useState('English');
  const [showLanguageSelector, setShowLanguageSelector] = useState(false);
  const [showLocationSelector, setShowLocationSelector] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  
  // Location detection
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          // In a real app, you'd use reverse geocoding to get state from coordinates
          // For demo, we'll use Maharashtra as default
          setUserLocation('Karnataka');
        },
        () => {
          setUserLocation('Maharashtra'); // fallback
        }
      );
    }
  }, []);

  // Close dropdowns when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element;
      if (!target.closest('.language-selector') && showLanguageSelector) {
        setShowLanguageSelector(false);
      }
      if (!target.closest('.location-selector') && showLocationSelector) {
        setShowLocationSelector(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showLanguageSelector, showLocationSelector]);
  
  const languages = [
    { code: 'en', name: 'English', native: 'English' },
    { code: 'hi', name: 'Hindi', native: 'рд╣рд┐рдВрджреА' },
    { code: 'mr', name: 'Marathi', native: 'рдорд░рд╛рдареА' },
    { code: 'gu', name: 'Gujarati', native: 'ркЧрлБркЬрк░рк╛ркдрлА' },
    { code: 'ta', name: 'Tamil', native: 'родрооро┐ро┤рпН' },
    { code: 'te', name: 'Telugu', native: 'р░др▒Жр░▓р▒Бр░Чр▒Б' }
  ];
  
  const locations = [
    { name: 'Maharashtra', emoji: 'ЁЯПЩя╕П' },
    { name: 'Gujarat', emoji: 'ЁЯПн' },
    { name: 'Tamil Nadu', emoji: 'ЁЯПЫя╕П' },
    { name: 'Karnataka', emoji: 'ЁЯМЖ' },
    { name: 'West Bengal', emoji: 'ЁЯОн' },
    { name: 'Telangana', emoji: 'ЁЯТ╗' }
  ];

  const stateInsights = {
    'Maharashtra': {
      English: {
        popular: 'Popular for gold investments and chit funds',
        embrace: 'Embraces digital payments',
        culturalText: 'Tell me about investment habits',
        englishText: 'Tell me about investment habits'
      },
      Hindi: {
        popular: 'рд╕реЛрдирд╛ рдирд┐рд╡реЗрд╢ рдФрд░ рдЪрд┐рдЯ рдлрдВрдб рдХреЗ рд▓рд┐рдП рд▓реЛрдХрдкреНрд░рд┐рдп',
        embrace: 'рдбрд┐рдЬрд┐рдЯрд▓ рднреБрдЧрддрд╛рди рдХреЛ рдЕрдкрдирд╛рддрд╛ рд╣реИ',
        culturalText: 'рд░рд╛рдЬреНрдп рдореЗрдВ рдирд┐рд╡реЗрд╢ рдХреА рдЖрджрддреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ',
        englishText: 'рдирд┐рд╡реЗрд╢ рдХреА рдЖрджрддреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ'
      },
      Marathi: {
        popular: 'рд╕реЛрдиреЗ рдЧреБрдВрддрд╡рдгреВрдХ рдЖрдгрд┐ рдЪрд┐рдЯ рдлрдВрдбрд╛рд╕рд╛рдареА рд▓реЛрдХрдкреНрд░рд┐рдп',
        embrace: 'рдбрд┐рдЬрд┐рдЯрд▓ рдкреЗрдореЗрдВрдЯ рд╕реНрд╡реАрдХрд╛рд░рддреЗ',
        culturalText: 'рд░рд╛рдЬреНрдпрд╛рддреАрд▓ рдЧреБрдВрддрд╡рдгреБрдХреАрдЪреНрдпрд╛ рд╕рд╡рдпреАрдВрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛',
        englishText: 'рдЧреБрдВрддрд╡рдгреБрдХреАрдЪреНрдпрд╛ рд╕рд╡рдпреАрдВрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛'
      },
      Tamil: {
        popular: 'родроЩрпНроХроорпН роорпБродро▓рпАроЯрпБ рооро▒рпНро▒рпБроорпН роЪро┐роЯрпН роГрокрогрпНроЯрпБроХро│рпБроХрпНроХрпБ рокро┐ро░рокро▓роорпН',
        embrace: 'роЯро┐роЬро┐роЯрпНроЯро▓рпН роХрпКроЯрпБрокрпНрокройро╡рпБроХро│рпИ роПро▒рпНро▒рпБроХрпНроХрпКро│рпНроХро┐ро▒родрпБ',
        culturalText: 'роорпБродро▓рпАроЯрпНроЯрпБ рокро┤роХрпНроХро╡ро┤роХрпНроХроЩрпНроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН',
        englishText: 'роорпБродро▓рпАроЯрпНроЯрпБ рокро┤роХрпНроХро╡ро┤роХрпНроХроЩрпНроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН'
      },
      Telugu: {
        popular: 'р░мр░Вр░Чр░╛р░░р░В р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр▒Бр░▓р▒Б р░ор░░р░┐р░пр▒Б р░Ър░┐р░Яр▒Н р░лр░Вр░бр▒НтАМр░▓р░Хр▒Б р░кр▒Нр░░р░╕р░┐р░жр▒Нр░зр░┐',
        embrace: 'р░бр░┐р░Ьр░┐р░Яр░▓р▒Н р░Ър▒Жр░▓р▒Нр░▓р░┐р░Вр░кр▒Бр░▓р░ир▒Б р░╕р▒Нр░╡р▒Ар░Хр░░р░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐',
        culturalText: 'р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐ р░Ер░▓р░╡р░╛р░Яр▒Нр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐',
        englishText: 'р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐ р░Ер░▓р░╡р░╛р░Яр▒Нр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐'
      },
      Gujarati: {
        popular: 'рк╕рлЛркирк╛ркирк╛ рк░рлЛркХрк╛ркг ркЕркирлЗ ркЪрк┐ркЯ рклркВркб ркорк╛ркЯрлЗ рк▓рлЛркХрккрлНрк░рк┐ркп',
        embrace: 'ркбрк┐ркЬрк┐ркЯрк▓ рккрлЗркорлЗркирлНркЯ ркЕрккркирк╛рк╡рлЗ ркЫрлЗ',
        culturalText: 'рк░рлЛркХрк╛ркгркирлА ркЖркжркдрлЛ рк╡рк┐рк╢рлЗ ркХрк╣рлЛ',
        englishText: 'рк░рлЛркХрк╛ркгркирлА ркЖркжркдрлЛ рк╡рк┐рк╢рлЗ ркХрк╣рлЛ'
      }
    },
    'Gujarat': {
      English: {
        popular: 'Popular for business investments',
        embrace: 'Strong entrepreneurial culture',
        culturalText: 'Tell me about business investments',
        englishText: 'Tell me about business investments'
      },
      Hindi: {
        popular: 'рд╡реНрдпрд╛рдкрд╛рд░рд┐рдХ рдирд┐рд╡реЗрд╢ рдХреЗ рд▓рд┐рдП рд▓реЛрдХрдкреНрд░рд┐рдп',
        embrace: 'рдордЬрдмреВрдд рдЙрджреНрдпрдорд╢реАрд▓рддрд╛ рд╕рдВрд╕реНрдХреГрддрд┐',
        culturalText: 'рд╡реНрдпрд╛рдкрд╛рд░рд┐рдХ рдирд┐рд╡реЗрд╢ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ',
        englishText: 'рд╡реНрдпрд╛рдкрд╛рд░рд┐рдХ рдирд┐рд╡реЗрд╢ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ'
      },
      Marathi: {
        popular: 'рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдЧреБрдВрддрд╡рдгреБрдХреАрд╕рд╛рдареА рд▓реЛрдХрдкреНрд░рд┐рдп',
        embrace: 'рдордЬрдмреВрдд рдЙрджреНрдпреЛрдЬрдХ рд╕рдВрд╕реНрдХреГрддреА',
        culturalText: 'рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдЧреБрдВрддрд╡рдгреБрдХреАрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛',
        englishText: 'рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдЧреБрдВрддрд╡рдгреБрдХреАрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛'
      },
      Tamil: {
        popular: 'ро╡рогро┐роХ роорпБродро▓рпАроЯрпБроХро│рпБроХрпНроХрпБ рокро┐ро░рокро▓роорпН',
        embrace: 'ро╡ро▓рпБро╡ро╛рой родрпКро┤ро┐ро▓рпНроорпБройрпИро╡рпЛро░рпН роХро▓ро╛роЪрпНроЪро╛ро░роорпН',
        culturalText: 'ро╡рогро┐роХ роорпБродро▓рпАроЯрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН',
        englishText: 'ро╡рогро┐роХ роорпБродро▓рпАроЯрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН'
      },
      Telugu: {
        popular: 'р░╡р▒Нр░пр░╛р░кр░╛р░░ р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр▒Бр░▓р░Хр▒Б р░кр▒Нр░░р░╕р░┐р░жр▒Нр░зр░┐',
        embrace: 'р░мр░▓р░ор▒Ир░и р░╡р▒Нр░пр░╡р░╕р▒Нр░ер░╛р░кр░Х р░╕р░Вр░╕р▒Нр░Хр▒Гр░др░┐',
        culturalText: 'р░╡р▒Нр░пр░╛р░кр░╛р░░ р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр▒Бр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐',
        englishText: 'р░╡р▒Нр░пр░╛р░кр░╛р░░ р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр▒Бр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐'
      },
      Gujarati: {
        popular: 'рк╡рлНркпрк╛рккрк╛рк░рк┐ркХ рк░рлЛркХрк╛ркг ркорк╛ркЯрлЗ рк▓рлЛркХрккрлНрк░рк┐ркп',
        embrace: 'ркоркЬркмрлВркд ркЙркжрлНркпрлЛркЧрк╕рк╛рк╣рк╕рк┐ркХ рк╕ркВрк╕рлНркХрлГркдрк┐',
        culturalText: 'рк╡рлНркпрк╛рккрк╛рк░рк┐ркХ рк░рлЛркХрк╛ркг рк╡рк┐рк╢рлЗ ркХрк╣рлЛ',
        englishText: 'рк╡рлНркпрк╛рккрк╛рк░рк┐ркХ рк░рлЛркХрк╛ркг рк╡рк┐рк╢рлЗ ркХрк╣рлЛ'
      }
    },
    'Tamil Nadu': {
      English: {
        popular: 'Popular for gold and property',
        embrace: 'Traditional saving methods',
        culturalText: 'Tell me about investment habits',
        englishText: 'Tell me about investment habits'
      },
      Hindi: {
        popular: 'рд╕реЛрдирд╛ рдФрд░ рд╕рдВрдкрддреНрддрд┐ рдХреЗ рд▓рд┐рдП рд▓реЛрдХрдкреНрд░рд┐рдп',
        embrace: 'рдкрд╛рд░рдВрдкрд░рд┐рдХ рдмрдЪрдд рдХреЗ рддрд░реАрдХреЗ',
        culturalText: 'рдирд┐рд╡реЗрд╢ рдХреА рдЖрджрддреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ',
        englishText: 'рдирд┐рд╡реЗрд╢ рдХреА рдЖрджрддреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ'
      },
      Marathi: {
        popular: 'рд╕реЛрдиреЗ рдЖрдгрд┐ рдорд╛рд▓рдорддреНрддреЗрд╕рд╛рдареА рд▓реЛрдХрдкреНрд░рд┐рдп',
        embrace: 'рдкрд╛рд░рдВрдкрд░рд┐рдХ рдмрдЪрдд рдкрджреНрдзрддреА',
        culturalText: 'рдЧреБрдВрддрд╡рдгреБрдХреАрдЪреНрдпрд╛ рд╕рд╡рдпреАрдВрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛',
        englishText: 'рдЧреБрдВрддрд╡рдгреБрдХреАрдЪреНрдпрд╛ рд╕рд╡рдпреАрдВрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛'
      },
      Tamil: {
        popular: 'родроЩрпНроХроорпН рооро▒рпНро▒рпБроорпН роЪрпКродрпНродрпБроХрпНроХро│рпБроХрпНроХрпБ рокро┐ро░рокро▓роорпН',
        embrace: 'рокро╛ро░роорпНрокро░ро┐роп роЪрпЗрооро┐рокрпНрокрпБ роорпБро▒рпИроХро│рпН',
        culturalText: 'роорпБродро▓рпАроЯрпНроЯрпБ рокро┤роХрпНроХро╡ро┤роХрпНроХроЩрпНроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН',
        englishText: 'роорпБродро▓рпАроЯрпНроЯрпБ рокро┤роХрпНроХро╡ро┤роХрпНроХроЩрпНроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН'
      },
      Telugu: {
        popular: 'р░мр░Вр░Чр░╛р░░р░В р░ор░░р░┐р░пр▒Б р░Жр░╕р▒Нр░др▒Бр░▓р░Хр▒Б р░кр▒Нр░░р░╕р░┐р░жр▒Нр░зр░┐',
        embrace: 'р░╕р░╛р░Вр░кр▒Нр░░р░жр░╛р░п р░кр▒Кр░жр▒Бр░кр▒Б р░кр░жр▒Нр░зр░др▒Бр░▓р▒Б',
        culturalText: 'р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐ р░Ер░▓р░╡р░╛р░Яр▒Нр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐',
        englishText: 'р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐ р░Ер░▓р░╡р░╛р░Яр▒Нр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐'
      },
      Gujarati: {
        popular: 'рк╕рлЛркирк╛ ркЕркирлЗ ркорк┐рк▓ркХркд ркорк╛ркЯрлЗ рк▓рлЛркХрккрлНрк░рк┐ркп',
        embrace: 'рккрк░ркВрккрк░рк╛ркЧркд ркмркЪркд рккркжрлНркзркдрк┐ркУ',
        culturalText: 'рк░рлЛркХрк╛ркгркирлА ркЖркжркдрлЛ рк╡рк┐рк╢рлЗ ркХрк╣рлЛ',
        englishText: 'рк░рлЛркХрк╛ркгркирлА ркЖркжркдрлЛ рк╡рк┐рк╢рлЗ ркХрк╣рлЛ'
      }
    },
    'Karnataka': {
      English: {
        popular: 'Tech hub with modern investment trends',
        embrace: 'Digital-first financial approach',
        culturalText: 'Tell me about tech investments',
        englishText: 'Tell me about tech investments'
      },
      Hindi: {
        popular: 'рдЖрдзреБрдирд┐рдХ рдирд┐рд╡реЗрд╢ рд░реБрдЭрд╛рдиреЛрдВ рдХреЗ рд╕рд╛рде рддрдХрдиреАрдХреА рдХреЗрдВрджреНрд░',
        embrace: 'рдбрд┐рдЬрд┐рдЯрд▓-рдлрд░реНрд╕реНрдЯ рд╡рд┐рддреНрддреАрдп рджреГрд╖реНрдЯрд┐рдХреЛрдг',
        culturalText: 'рддрдХрдиреАрдХреА рдирд┐рд╡реЗрд╢ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ',
        englishText: 'рддрдХрдиреАрдХреА рдирд┐рд╡реЗрд╢ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ'
      },
      Marathi: {
        popular: 'рдЖрдзреБрдирд┐рдХ рдЧреБрдВрддрд╡рдгреВрдХ рдЯреНрд░реЗрдВрдбрд╕рд╣ рддрдВрддреНрд░рдЬреНрдЮрд╛рди рдХреЗрдВрджреНрд░',
        embrace: 'рдбрд┐рдЬрд┐рдЯрд▓-рдлрд░реНрд╕реНрдЯ рдЖрд░реНрдерд┐рдХ рджреГрд╖реНрдЯрд┐рдХреЛрди',
        culturalText: 'рддрдВрддреНрд░рдЬреНрдЮрд╛рди рдЧреБрдВрддрд╡рдгреБрдХреАрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛',
        englishText: 'рддрдВрддреНрд░рдЬреНрдЮрд╛рди рдЧреБрдВрддрд╡рдгреБрдХреАрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛'
      },
      Tamil: {
        popular: 'роиро╡рпАрой роорпБродро▓рпАроЯрпНроЯрпБ рокрпЛроХрпНроХрпБроХро│рпБроЯройрпН родрпКро┤ро┐ро▓рпНроирпБроЯрпНрок роорпИропроорпН',
        embrace: 'роЯро┐роЬро┐роЯрпНроЯро▓рпН-роорпБродро▓рпН роиро┐родро┐ роЕрогрпБроХрпБроорпБро▒рпИ',
        culturalText: 'родрпКро┤ро┐ро▓рпНроирпБроЯрпНрок роорпБродро▓рпАроЯрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН',
        englishText: 'родрпКро┤ро┐ро▓рпНроирпБроЯрпНрок роорпБродро▓рпАроЯрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН'
      },
      Telugu: {
        popular: 'р░Жр░зр▒Бр░ир░┐р░Х р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐ р░Яр▒Нр░░р▒Жр░Вр░бр▒НтАМр░▓р░др▒Л р░Яр▒Жр░Хр▒Н р░╣р░мр▒Н',
        embrace: 'р░бр░┐р░Ьр░┐р░Яр░▓р▒Н-р░лр░╕р▒Нр░Яр▒Н р░лр▒Ир░ир░╛р░ир▒Нр░╖р░┐р░пр░▓р▒Н р░Ер░кр▒Нр░░р▒Лр░Ър▒Н',
        culturalText: 'р░Яр▒Жр░Хр▒Н р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр▒Бр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐',
        englishText: 'р░Яр▒Жр░Хр▒Н р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр▒Бр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐'
      },
      Gujarati: {
        popular: 'ркЖркзрлБркирк┐ркХ рк░рлЛркХрк╛ркг рк╡рк▓ркгрлЛ рк╕рк╛ркерлЗ ркЯрлЗркХ рк╣ркм',
        embrace: 'ркбрк┐ркЬрк┐ркЯрк▓-рклрк░рлНрк╕рлНркЯ ркирк╛ркгрк╛ркХрлАркп ркЕркнрк┐ркЧрко',
        culturalText: 'ркЯрлЗркХ рк░рлЛркХрк╛ркг рк╡рк┐рк╢рлЗ ркХрк╣рлЛ',
        englishText: 'ркЯрлЗркХ рк░рлЛркХрк╛ркг рк╡рк┐рк╢рлЗ ркХрк╣рлЛ'
      }
    },
    'West Bengal': {
      English: {
        popular: 'Traditional banking and cultural investments',
        embrace: 'Heritage-focused financial planning',
        culturalText: 'Tell me about cultural investments',
        englishText: 'Tell me about cultural investments'
      },
      Hindi: {
        popular: 'рдкрд╛рд░рдВрдкрд░рд┐рдХ рдмреИрдВрдХрд┐рдВрдЧ рдФрд░ рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдирд┐рд╡реЗрд╢',
        embrace: 'рд╡рд┐рд░рд╛рд╕рдд-рдХреЗрдВрджреНрд░рд┐рдд рд╡рд┐рддреНрддреАрдп рдпреЛрдЬрдирд╛',
        culturalText: 'рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдирд┐рд╡реЗрд╢ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ',
        englishText: 'рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдирд┐рд╡реЗрд╢ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ'
      },
      Marathi: {
        popular: 'рдкрд╛рд░рдВрдкрд░рд┐рдХ рдмрдБрдХрд┐рдВрдЧ рдЖрдгрд┐ рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдЧреБрдВрддрд╡рдгреВрдХ',
        embrace: 'рд╡рд╛рд░рд╕рд╛-рдХреЗрдВрджреНрд░рд┐рдд рдЖрд░реНрдерд┐рдХ рдирд┐рдпреЛрдЬрди',
        culturalText: 'рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдЧреБрдВрддрд╡рдгреБрдХреАрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛',
        englishText: 'рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдЧреБрдВрддрд╡рдгреБрдХреАрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛'
      },
      Tamil: {
        popular: 'рокро╛ро░роорпНрокро░ро┐роп ро╡роЩрпНроХро┐ рооро▒рпНро▒рпБроорпН роХро▓ро╛роЪрпНроЪро╛ро░ роорпБродро▓рпАроЯрпБроХро│рпН',
        embrace: 'рокро╛ро░роорпНрокро░ро┐роп-роорпИропрооро╛рой роиро┐родро┐родрпН родро┐роЯрпНроЯрооро┐роЯро▓рпН',
        culturalText: 'роХро▓ро╛роЪрпНроЪро╛ро░ роорпБродро▓рпАроЯрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН',
        englishText: 'роХро▓ро╛роЪрпНроЪро╛ро░ роорпБродро▓рпАроЯрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН'
      },
      Telugu: {
        popular: 'р░╕р░╛р░Вр░кр▒Нр░░р░жр░╛р░п р░мр▒Нр░пр░╛р░Вр░Хр░┐р░Вр░Чр▒Н р░ор░░р░┐р░пр▒Б р░╕р░╛р░Вр░╕р▒Нр░Хр▒Гр░др░┐р░Х р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр▒Бр░▓р▒Б',
        embrace: 'р░╡р░╛р░░р░╕р░др▒Нр░╡-р░Хр▒Зр░Вр░жр▒Нр░░р░┐р░д р░Жр░░р▒Нр░ер░┐р░Х р░кр▒Нр░░р░гр░╛р░│р░┐р░Х',
        culturalText: 'р░╕р░╛р░Вр░╕р▒Нр░Хр▒Гр░др░┐р░Х р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр▒Бр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐',
        englishText: 'р░╕р░╛р░Вр░╕р▒Нр░Хр▒Гр░др░┐р░Х р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр▒Бр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐'
      },
      Gujarati: {
        popular: 'рккрк░ркВрккрк░рк╛ркЧркд ркмрлЗркВркХрк┐ркВркЧ ркЕркирлЗ рк╕рк╛ркВрк╕рлНркХрлГркдрк┐ркХ рк░рлЛркХрк╛ркг',
        embrace: 'рк╡рк╛рк░рк╕рк╛-ркХрлЗркирлНркжрлНрк░рк┐ркд ркирк╛ркгрк╛ркХрлАркп ркЖркпрлЛркЬрки',
        culturalText: 'рк╕рк╛ркВрк╕рлНркХрлГркдрк┐ркХ рк░рлЛркХрк╛ркг рк╡рк┐рк╢рлЗ ркХрк╣рлЛ',
        englishText: 'рк╕рк╛ркВрк╕рлНркХрлГркдрк┐ркХ рк░рлЛркХрк╛ркг рк╡рк┐рк╢рлЗ ркХрк╣рлЛ'
      }
    },
    'Telangana': {
      English: {
        popular: 'IT sector growth and startup investments',
        embrace: 'Innovation-driven financial solutions',
        culturalText: 'Tell me about startup investments',
        englishText: 'Tell me about startup investments'
      },
      Hindi: {
        popular: 'рдЖрдИрдЯреА рдХреНрд╖реЗрддреНрд░ рдХреА рд╡реГрджреНрдзрд┐ рдФрд░ рд╕реНрдЯрд╛рд░реНрдЯрдЕрдк рдирд┐рд╡реЗрд╢',
        embrace: 'рдирд╡рд╛рдЪрд╛рд░-рд╕рдВрдЪрд╛рд▓рд┐рдд рд╡рд┐рддреНрддреАрдп рд╕рдорд╛рдзрд╛рди',
        culturalText: 'рд╕реНрдЯрд╛рд░реНрдЯрдЕрдк рдирд┐рд╡реЗрд╢ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ',
        englishText: 'рд╕реНрдЯрд╛рд░реНрдЯрдЕрдк рдирд┐рд╡реЗрд╢ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ'
      },
      Marathi: {
        popular: 'рдЖрдпрдЯреА рдХреНрд╖реЗрддреНрд░рд╛рдЪреА рд╡рд╛рдв рдЖрдгрд┐ рд╕реНрдЯрд╛рд░реНрдЯрдЕрдк рдЧреБрдВрддрд╡рдгреВрдХ',
        embrace: 'рдирд╡рд╛рдЪрд╛рд░-рдЪрд╛рд▓рд┐рдд рдЖрд░реНрдерд┐рдХ рд╕рдорд╛рдзрд╛рдиреЗ',
        culturalText: 'рд╕реНрдЯрд╛рд░реНрдЯрдЕрдк рдЧреБрдВрддрд╡рдгреБрдХреАрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛',
        englishText: 'рд╕реНрдЯрд╛рд░реНрдЯрдЕрдк рдЧреБрдВрддрд╡рдгреБрдХреАрдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛'
      },
      Tamil: {
        popular: 'роРроЯро┐ родрпБро▒рпИ ро╡ро│ро░рпНроЪрпНроЪро┐ рооро▒рпНро▒рпБроорпН ро╕рпНроЯро╛ро░рпНроЯрпНроЕрокрпН роорпБродро▓рпАроЯрпБроХро│рпН',
        embrace: 'рокрпБродрпБроорпИ-роЙроирпНродрпБродро▓рпН роиро┐родро┐ родрпАро░рпНро╡рпБроХро│рпН',
        culturalText: 'ро╕рпНроЯро╛ро░рпНроЯрпНроЕрокрпН роорпБродро▓рпАроЯрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН',
        englishText: 'ро╕рпНроЯро╛ро░рпНроЯрпНроЕрокрпН роорпБродро▓рпАроЯрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН'
      },
      Telugu: {
        popular: 'р░Рр░Яр░┐ р░░р░Вр░Ч р░╡р▒Гр░жр▒Нр░зр░┐ р░ор░░р░┐р░пр▒Б р░╕р▒Нр░Яр░╛р░░р▒Нр░Яр░кр▒Н р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр▒Бр░▓р▒Б',
        embrace: 'р░Зр░ир▒Нр░ир▒Лр░╡р▒Зр░╖р░ир▒Н-р░бр▒Нр░░р░┐р░╡р▒Жр░ир▒Н р░лр▒Ир░ир░╛р░ир▒Нр░╖р░┐р░пр░▓р▒Н р░╕р▒Кр░▓р▒Нр░пр▒Вр░╖р░ир▒Нр░╕р▒Н',
        culturalText: 'р░╕р▒Нр░Яр░╛р░░р▒Нр░Яр░кр▒Н р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр▒Бр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐',
        englishText: 'р░╕р▒Нр░Яр░╛р░░р▒Нр░Яр░кр▒Н р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр▒Бр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐'
      },
      Gujarati: {
        popular: 'ркЖркИркЯрлА ркХрлНрк╖рлЗркдрлНрк░ркирлА рк╡рлГркжрлНркзрк┐ ркЕркирлЗ рк╕рлНркЯрк╛рк░рлНркЯркЕркк рк░рлЛркХрк╛ркг',
        embrace: 'ркирк╡рлАркиркдрк╛-рк╕ркВркЪрк╛рк▓рк┐ркд ркирк╛ркгрк╛ркХрлАркп ркЙркХрлЗрк▓рлЛ',
        culturalText: 'рк╕рлНркЯрк╛рк░рлНркЯркЕркк рк░рлЛркХрк╛ркг рк╡рк┐рк╢рлЗ ркХрк╣рлЛ',
        englishText: 'рк╕рлНркЯрк╛рк░рлНркЯркЕркк рк░рлЛркХрк╛ркг рк╡рк┐рк╢рлЗ ркХрк╣рлЛ'
      }
    }
  };
  
  const currentInsight = stateInsights[userLocation]?.[selectedLanguage] || stateInsights['Maharashtra']?.[selectedLanguage] || stateInsights['Maharashtra']['English'];

  // Text-to-speech functionality
  const speakPageContent = () => {
    // Check if speech synthesis is supported
    if (!('speechSynthesis' in window)) {
      alert('Text-to-speech is not supported in your browser.');
      return;
    }

    // If already speaking, stop the current speech
    if (isSpeaking) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
      return;
    }

    try {
      // Cancel any existing speech before starting new one
      window.speechSynthesis.cancel();
      
      // Wait a bit to ensure cancellation is complete
      setTimeout(() => {
        const textToSpeak = `
          ${getGreeting()}! ${currentContent.subtitle}
          ${currentContent.actionButtons.map(btn => `${btn.title}: ${btn.description}`).join('. ')}
          ${currentContent.stateInsights} for ${userLocation}: ${currentInsight.popular}. ${currentInsight.embrace}.
        `;

        const utterance = new SpeechSynthesisUtterance(textToSpeak.trim());
        utterance.rate = 0.8;
        utterance.pitch = 1;
        utterance.volume = 1;
        
        // Set language based on selection
        switch (selectedLanguage) {
          case 'Hindi':
            utterance.lang = 'hi-IN';
            break;
          case 'Marathi':
            utterance.lang = 'mr-IN';
            break;
          case 'Tamil':
            utterance.lang = 'ta-IN';
            break;
          case 'Telugu':
            utterance.lang = 'te-IN';
            break;
          case 'Gujarati':
            utterance.lang = 'gu-IN';
            break;
          default:
            utterance.lang = 'en-IN';
        }
        
        utterance.onstart = () => {
          console.log('Speech started successfully');
          setIsSpeaking(true);
        };
        
        utterance.onend = () => {
          console.log('Speech completed');
          setIsSpeaking(false);
        };
        
        utterance.onerror = (event) => {
          console.error('Speech error:', event.error);
          setIsSpeaking(false);
          
          // Handle different error types
          if (event.error === 'canceled') {
            console.log('Speech was canceled by user or system');
          } else if (event.error === 'not-allowed') {
            alert('Speech synthesis permission denied. Please allow microphone access.');
          } else if (event.error === 'network') {
            alert('Network error occurred during speech synthesis.');
          } else {
            alert(`Speech synthesis error: ${event.error}. Please try again.`);
          }
        };
        
        utterance.onpause = () => {
          console.log('Speech paused');
        };
        
        utterance.onresume = () => {
          console.log('Speech resumed');
        };
        
        // Start speech synthesis
        try {
          window.speechSynthesis.speak(utterance);
          console.log('Speech synthesis initiated');
        } catch (speakError) {
          console.error('Error calling speak():', speakError);
          setIsSpeaking(false);
          alert('Failed to start speech synthesis.');
        }
      }, 200); // Increased delay to ensure proper cancellation
      
    } catch (error) {
      console.error('Error in speech synthesis setup:', error);
      setIsSpeaking(false);
      alert('Failed to initialize speech synthesis.');
    }
  };

  // Language content
  const content = {
    English: {
      greeting: {
        morning: 'Good Morning',
        afternoon: 'Good Afternoon',
        evening: 'Good Evening'
      },
      subtitle: 'How can I assist you with your finances?',
      actionButtons: [
        {
          title: 'Get Savings Tips',
          description: 'Personalized advice for your financial goals'
        },
        {
          title: 'View Financial Trends',
          description: 'Market insights and investment opportunities'
        },
        {
          title: 'Explore Investment Options',
          description: 'Discover the best investment plans for you'
        }
      ],
      stateInsights: 'State-wise Insights'
    },
    Hindi: {
      greeting: {
        morning: 'рд╕реБрдкреНрд░рднрд╛рдд',
        afternoon: 'рдирдорд╕реНрдХрд╛рд░',
        evening: 'рд╢реБрдн рд╕рдВрдзреНрдпрд╛'
      },
      subtitle: 'рдореИрдВ рдЖрдкрдХреЗ рд╡рд┐рддреНрдд рдореЗрдВ рдХреИрд╕реЗ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддреА рд╣реВрдВ?',
      actionButtons: [
        {
          title: 'рдмрдЪрдд рдХреА рд╕рд▓рд╛рд╣ рдкрд╛рдПрдВ',
          description: 'рдЖрдкрдХреЗ рд╡рд┐рддреНрддреАрдп рд▓рдХреНрд╖реНрдпреЛрдВ рдХреЗ рд▓рд┐рдП рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд▓рд╛рд╣'
        },
        {
          title: 'рд╡рд┐рддреНрддреАрдп рд░реБрдЭрд╛рди рджреЗрдЦреЗрдВ',
          description: 'рдмрд╛рдЬрд╛рд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдФрд░ рдирд┐рд╡реЗрд╢ рдХреЗ рдЕрд╡рд╕рд░'
        },
        {
          title: 'рдирд┐рд╡реЗрд╢ рд╡рд┐рдХрд▓реНрдк рдЦреЛрдЬреЗрдВ',
          description: 'рдЖрдкрдХреЗ рд▓рд┐рдП рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рдирд┐рд╡реЗрд╢ рдпреЛрдЬрдирд╛рдПрдВ рдЦреЛрдЬреЗрдВ'
        }
      ],
      stateInsights: 'рд░рд╛рдЬреНрдп-рд╡рд╛рд░ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐'
    },
    Marathi: {
      greeting: {
        morning: 'рд╕реБрдкреНрд░рднрд╛рдд',
        afternoon: 'рдирдорд╕реНрдХрд╛рд░',
        evening: 'рд╢реБрдн рд╕рдВрдзреНрдпрд╛'
      },
      subtitle: 'рдореА рддреБрдордЪреНрдпрд╛ рдЖрд░реНрдерд┐рдХ рдмрд╛рдмрддреАрдд рдХрд╢реА рдорджрдд рдХрд░реВ рд╢рдХрддреЗ?',
      actionButtons: [
        {
          title: 'рдмрдЪрддреАрдЪреЗ рд╕рд▓реНрд▓реЗ рдорд┐рд│рд╡рд╛',
          description: 'рддреБрдордЪреНрдпрд╛ рдЖрд░реНрдерд┐рдХ рдЙрджреНрджрд┐рд╖реНрдЯрд╛рдВрд╕рд╛рдареА рд╡реИрдпрдХреНрддрд┐рдХ рд╕рд▓реНрд▓рд╛'
        },
        {
          title: 'рдЖрд░реНрдерд┐рдХ рдЯреНрд░реЗрдВрдб рдкрд╣рд╛',
          description: 'рдмрд╛рдЬрд╛рд░рд╛рддреАрд▓ рдорд╛рд╣рд┐рддреА рдЖрдгрд┐ рдЧреБрдВрддрд╡рдгреБрдХреАрдЪреНрдпрд╛ рд╕рдВрдзреА'
        },
        {
          title: 'рдЧреБрдВрддрд╡рдгреВрдХ рдкрд░реНрдпрд╛рдп рд╢реЛрдзрд╛',
          description: 'рддреБрдордЪреНрдпрд╛рд╕рд╛рдареА рд╕рд░реНрд╡реЛрддреНрддрдо рдЧреБрдВрддрд╡рдгреВрдХ рдпреЛрдЬрдирд╛ рд╢реЛрдзрд╛'
        }
      ],
      stateInsights: 'рд░рд╛рдЬреНрдпрдирд┐рд╣рд╛рдп рдЕрдВрддрд░реНрджреГрд╖реНрдЯреА'
    },
    Tamil: {
      greeting: {
        morning: 'роХро╛ро▓рпИ ро╡рогроХрпНроХроорпН',
        afternoon: 'роородро┐роп ро╡рогроХрпНроХроорпН',
        evening: 'рооро╛ро▓рпИ ро╡рогроХрпНроХроорпН'
      },
      subtitle: 'роЙроЩрпНроХро│рпН роиро┐родро┐ ро╡ро┐ро╖ропроЩрпНроХро│ро┐ро▓рпН роиро╛ройрпН роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?',
      actionButtons: [
        {
          title: 'роЪрпЗрооро┐рокрпНрокрпБ роЖро▓рпЛроЪройрпИроХро│рпН рокрпЖро▒рпБроЩрпНроХро│рпН',
          description: 'роЙроЩрпНроХро│рпН роиро┐родро┐ роЗро▓роХрпНроХрпБроХро│рпБроХрпНроХро╛рой родройро┐рокрпНрокроЯрпНроЯ роЖро▓рпЛроЪройрпИ'
        },
        {
          title: 'роиро┐родро┐ рокрпЛроХрпНроХрпБроХро│рпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН',
          description: 'роЪроирпНродрпИ роирпБрогрпНрогро▒ро┐ро╡рпБ рооро▒рпНро▒рпБроорпН роорпБродро▓рпАроЯрпНроЯрпБ ро╡ро╛ропрпНрокрпНрокрпБроХро│рпН'
        },
        {
          title: 'роорпБродро▓рпАроЯрпНроЯрпБ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпИ роЖро░ро╛ропрпБроЩрпНроХро│рпН',
          description: 'роЙроЩрпНроХро│рпБроХрпНроХро╛рой роЪро┐ро▒роирпНрод роорпБродро▓рпАроЯрпНроЯрпБ родро┐роЯрпНроЯроЩрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропрпБроЩрпНроХро│рпН'
        }
      ],
      stateInsights: 'рооро╛роиро┐ро▓ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой роирпБрогрпНрогро▒ро┐ро╡рпБ'
    },
    Telugu: {
      greeting: {
        morning: 'р░╢р▒Бр░нр▒Лр░жр░пр░В',
        afternoon: 'р░ор░зр▒Нр░пр░╛р░╣р▒Нр░и р░ир░ор░╕р▒Нр░Хр░╛р░░р░В',
        evening: 'р░╢р▒Бр░н р░╕р░╛р░пр░Вр░др▒Нр░░р░В'
      },
      subtitle: 'р░ор▒А р░Жр░░р▒Нр░ер░┐р░Х р░╡р░┐р░╖р░пр░╛р░▓р░▓р▒Л р░ир▒Зр░ир▒Б р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б?',
      actionButtons: [
        {
          title: 'р░кр▒Кр░жр▒Бр░кр▒Б р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐',
          description: 'р░ор▒А р░Жр░░р▒Нр░ер░┐р░Х р░▓р░Хр▒Нр░╖р▒Нр░пр░╛р░▓р░Хр▒Б р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░╕р░▓р░╣р░╛'
        },
        {
          title: 'р░Жр░░р▒Нр░ер░┐р░Х р░Яр▒Нр░░р▒Жр░Вр░бр▒НтАМр░▓р░ир▒Б р░Ър▒Вр░бр░Вр░бр░┐',
          description: 'р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр░┐ р░ор░░р░┐р░пр▒Б р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐ р░Ер░╡р░Хр░╛р░╢р░╛р░▓р▒Б'
        },
        {
          title: 'р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐ р░Ор░Вр░кр░┐р░Хр░▓р░ир▒Б р░Ер░ир▒Нр░╡р▒Зр░╖р░┐р░Вр░Ър░Вр░бр░┐',
          description: 'р░ор▒Ар░Хр▒Б р░Ер░др▒Нр░пр▒Бр░др▒Нр░др░о р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐ р░кр▒Нр░░р░гр░╛р░│р░┐р░Хр░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐'
        }
      ],
      stateInsights: 'р░░р░╛р░╖р▒Нр░Яр▒Нр░░р░╡р░╛р░░р▒А р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр▒Бр░▓р▒Б'
    },
    Gujarati: {
      greeting: {
        morning: 'рк╕рлБрккрлНрк░ркнрк╛ркд',
        afternoon: 'ркиркорк╕рлНркдрлЗ',
        evening: 'рк╢рлБркн рк╕рк╛ркВркЬ'
      },
      subtitle: 'рк╣рлБркВ ркдркорк╛рк░рлА ркирк╛ркгрк╛ркХрлАркп ркмрк╛ркмркдрлЛркорк╛ркВ ркХрлЗрк╡рлА рк░рлАркдрлЗ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ?',
      actionButtons: [
        {
          title: 'ркмркЪркд рк╕рк▓рк╛рк╣ ркорлЗрк│рк╡рлЛ',
          description: 'ркдркорк╛рк░рк╛ ркирк╛ркгрк╛ркХрлАркп рк▓ркХрлНрк╖рлНркпрлЛ ркорк╛ркЯрлЗ рк╡рлНркпркХрлНркдрк┐ркЧркд рк╕рк▓рк╛рк╣'
        },
        {
          title: 'ркирк╛ркгрк╛ркХрлАркп рк╡рк▓ркгрлЛ ркЬрлБркУ',
          description: 'ркмркЬрк╛рк░ркирлА рк╕ркоркЬ ркЕркирлЗ рк░рлЛркХрк╛ркгркирлА ркдркХрлЛ'
        },
        {
          title: 'рк░рлЛркХрк╛ркг рк╡рк┐ркХрк▓рлНрккрлЛ рк╢рлЛркзрлЛ',
          description: 'ркдркорк╛рк░рк╛ ркорк╛ркЯрлЗ рк╢рлНрк░рлЗрк╖рлНрка рк░рлЛркХрк╛ркг ркпрлЛркЬркирк╛ркУ рк╢рлЛркзрлЛ'
        }
      ],
      stateInsights: 'рк░рк╛ркЬрлНркпрк╡рк╛рк░ ркЕркВркдрк░рлНркжрлГрк╖рлНркЯрк┐'
    }
  };
  
  const currentContent = content[selectedLanguage] || content.English;

  const getGreeting = () => {
    const hour = new Date().getHours();
    if (hour < 12) return currentContent.greeting.morning;
    if (hour < 17) return currentContent.greeting.afternoon;
    return currentContent.greeting.evening;
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Mobile-First Design */}
      <div className="max-w-md mx-auto bg-white min-h-screen shadow-xl">
        {/* Header */}
        <div className="bg-white px-6 py-4 flex items-center justify-between border-b border-gray-100">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-lg flex items-center justify-center">
              <Lightbulb className="w-5 h-5 text-white" />
            </div>
            <span className="text-xl font-bold text-gray-900">FinLight</span>
          </div>
          
          <div className="flex items-center space-x-3">
            {/* Speaker Icon for Text-to-Speech */}
            <button
              onClick={speakPageContent}
              className={`p-2 rounded-lg transition-colors ${
                isSpeaking 
                  ? 'bg-orange-100 text-orange-600' 
                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
              }`}
              title={isSpeaking ? 'Stop reading' : 'Read page content'}
            >
              <Volume2 className={`w-5 h-5 ${isSpeaking ? 'animate-pulse' : ''}`} />
            </button>
            
            <div className="relative language-selector">
            <button
              onClick={() => setShowLanguageSelector(!showLanguageSelector)}
              className="flex items-center space-x-1 text-gray-600 hover:text-gray-900"
            >
              <Globe className="w-5 h-5" />
              <span className="text-sm">{selectedLanguage}</span>
            </button>
            
            {showLanguageSelector && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                className="absolute right-0 top-8 bg-white border border-gray-200 rounded-lg shadow-lg z-10 w-48"
              >
                {languages.map((lang) => (
                  <button
                    key={lang.code}
                    onClick={() => {
                      setSelectedLanguage(lang.name);
                      setShowLanguageSelector(false);
                    }}
                    className="w-full px-4 py-2 text-left hover:bg-gray-50 flex justify-between items-center"
                  >
                    <span className="text-sm">{lang.name}</span>
                    <span className="text-xs text-gray-500">{lang.native}</span>
                  </button>
                ))}
              </motion.div>
            )}
            </div>
          </div>
        </div>
        
        {/* Avatar and Greeting */}
        <div className="px-6 py-8">
          <div className="flex items-center space-x-4 mb-6">
            <div className="w-16 h-16 rounded-full bg-gradient-to-r from-blue-400 to-purple-500 flex items-center justify-center">
              <User className="w-8 h-8 text-white" />
            </div>
            <div>
              <h2 className="text-lg font-semibold text-gray-900">{getGreeting()}!</h2>
              <p className="text-gray-600">{currentContent.subtitle}</p>
            </div>
          </div>
          
          {/* Action Buttons */}
          <div className="space-y-3 mb-6">
            {currentContent.actionButtons.map((button, index) => (
              <Link
                key={index}
                to="/login"
                className="block w-full p-4 bg-gray-50 hover:bg-gray-100 rounded-xl transition-colors"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-medium text-gray-900">{button.title}</h3>
                    <p className="text-sm text-gray-600">{button.description}</p>
                  </div>
                  <ChevronRight className="w-5 h-5 text-gray-400" />
                </div>
              </Link>
            ))}
          </div>
          

          
          {/* State-wise Insights */}
          <div className="bg-gradient-to-r from-orange-50 to-yellow-50 rounded-xl p-4">
            <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
              <MapPin className="w-5 h-5 mr-2 text-orange-500" />
              {currentContent.stateInsights}
            </h3>
            
            <div className="flex items-start space-x-3">
              <div className="w-12 h-12 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-lg flex items-center justify-center">
                <TrendingUp className="w-6 h-6 text-white" />
              </div>
              
              <div className="flex-1">
                <div className="flex items-center justify-between mb-1">
                  <h4 className="font-medium text-gray-900">{userLocation}</h4>
                  <div className="relative location-selector">
                     <button
                       onClick={() => setShowLocationSelector(!showLocationSelector)}
                       className="flex items-center space-x-1 text-xs text-gray-600 hover:text-gray-900 bg-gray-100 px-2 py-1 rounded-md"
                     >
                       <Settings className="w-3 h-3" />
                       <span>Change</span>
                     </button>
                     
                     {showLocationSelector && (
                       <motion.div
                         initial={{ opacity: 0, y: -10 }}
                         animate={{ opacity: 1, y: 0 }}
                         className="absolute right-0 top-8 bg-white border border-gray-200 rounded-lg shadow-lg z-20 w-48"
                       >
                        {locations.map((location) => (
                          <button
                            key={location.name}
                            onClick={() => {
                              setUserLocation(location.name);
                              setShowLocationSelector(false);
                            }}
                            className={`w-full px-4 py-2 text-left hover:bg-gray-50 flex items-center space-x-2 ${
                              userLocation === location.name ? 'bg-orange-50 text-orange-700' : ''
                            }`}
                          >
                            <span className="text-lg">{location.emoji}</span>
                            <span className="text-sm">{location.name}</span>
                          </button>
                        ))}
                      </motion.div>
                    )}
                  </div>
                </div>
                <p className="text-sm text-gray-600 mb-2">{currentInsight.popular}</p>
                <p className="text-sm text-gray-600 mb-3">{currentInsight.embrace}</p>
                
                <Link
                  to="/login"
                  className="block p-3 bg-white rounded-lg border border-gray-200 hover:border-orange-300 transition-colors"
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-900">{currentInsight.culturalText}</p>
                      <p className="text-xs text-gray-500">{currentInsight.englishText}</p>
                    </div>
                    <ChevronRight className="w-4 h-4 text-gray-400" />
                  </div>
                </Link>
              </div>
            </div>
          </div>
        </div>
        
        {/* Bottom CTA */}
        <div className="px-6 pb-8">
          <Link
            to="/login"
            className="block w-full py-4 bg-gradient-to-r from-yellow-400 to-orange-500 text-white text-center font-semibold rounded-xl hover:from-yellow-500 hover:to-orange-600 transition-all shadow-lg"
          >
            Get Started with FinLight
          </Link>
          
          <p className="text-center text-xs text-gray-500 mt-4">
            Join thousands building wealth with cultural intelligence
          </p>
        </div>
      </div>
      
      {/* Desktop Fallback Message */}
      <div className="hidden md:block fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center">
        <div className="bg-white p-8 rounded-xl max-w-md mx-4 text-center">
          <Lightbulb className="w-12 h-12 text-yellow-500 mx-auto mb-4" />
          <h2 className="text-xl font-bold text-gray-900 mb-2">Mobile Experience</h2>
          <p className="text-gray-600 mb-4">
            FinLight is optimized for mobile devices. Please view on a mobile device or resize your browser window.
          </p>
          <Link
            to="/login"
            className="inline-block px-6 py-3 bg-gradient-to-r from-yellow-400 to-orange-500 text-white font-semibold rounded-lg hover:from-yellow-500 hover:to-orange-600 transition-all"
          >
            Continue to Login
          </Link>
        </div>
      </div>
    </div>
  );
};

export default Home;